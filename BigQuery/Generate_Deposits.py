from datetime import datetime, timedelta
import requests
import random
import string
import time

# SavingsGoals data generated by Generate_Goals.py 
goals = [
    {
        "SGID": 26,
        "AccountID": 12,
        "Name": "pqcptln",
        "GoalAmt": 196.13,
        "ContrAmt": 6.33,
        "Period": "Weekly",
        "NumPeriods": 31,
        "StartDate": "2020-11-17",
        "EndDate": "2021-06-16"
    },
    {
        "SGID": 31,
        "AccountID": 12,
        "Name": "dneyvcf",
        "GoalAmt": 941.25,
        "ContrAmt": 29.41,
        "Period": "Weekly",
        "NumPeriods": 32,
        "StartDate": "2020-11-16",
        "EndDate": "2021-06-25"
    },
    {
        "SGID": 33,
        "AccountID": 12,
        "Name": "adavuu",
        "GoalAmt": 1296.49,
        "ContrAmt": 37.04,
        "Period": "Weekly",
        "NumPeriods": 35,
        "StartDate": "2020-11-02",
        "EndDate": "2021-07-03"
    },
    {
        "SGID": 25,
        "AccountID": 12,
        "Name": "haefpc",
        "GoalAmt": 1327.14,
        "ContrAmt": 69.85,
        "Period": "Weekly",
        "NumPeriods": 19,
        "StartDate": "2021-03-02",
        "EndDate": "2021-07-11"
    },
    {
        "SGID": 34,
        "AccountID": 12,
        "Name": "nxgmht",
        "GoalAmt": 841.18,
        "ContrAmt": 140.2,
        "Period": "Monthly",
        "NumPeriods": 6,
        "StartDate": "2021-02-08",
        "EndDate": "2021-07-30"
    },
    {
        "SGID": 27,
        "AccountID": 12,
        "Name": "vptriyftb",
        "GoalAmt": 1259.25,
        "ContrAmt": 157.41,
        "Period": "Monthly",
        "NumPeriods": 8,
        "StartDate": "2020-12-30",
        "EndDate": "2021-08-21"
    },
    {
        "SGID": 32,
        "AccountID": 12,
        "Name": "yflebiqvt",
        "GoalAmt": 118.44,
        "ContrAmt": 19.74,
        "Period": "Monthly",
        "NumPeriods": 6,
        "StartDate": "2021-03-20",
        "EndDate": "2021-09-08"
    },
    {
        "SGID": 30,
        "AccountID": 12,
        "Name": "himnnv",
        "GoalAmt": 623.54,
        "ContrAmt": 15.21,
        "Period": "Weekly",
        "NumPeriods": 41,
        "StartDate": "2020-11-30",
        "EndDate": "2021-09-11"
    },
    {
        "SGID": 29,
        "AccountID": 12,
        "Name": "mgdfbjuk",
        "GoalAmt": 1450.55,
        "ContrAmt": 29.01,
        "Period": "Weekly",
        "NumPeriods": 50,
        "StartDate": "2020-11-12",
        "EndDate": "2021-10-22"
    },
    {
        "SGID": 28,
        "AccountID": 12,
        "Name": "yghkcpj",
        "GoalAmt": 650.35,
        "ContrAmt": 17.11,
        "Period": "Weekly",
        "NumPeriods": 38,
        "StartDate": "2021-02-18",
        "EndDate": "2021-11-10"
    }
]


def post(data: dict):
    url = 'https://frankfund.appspot.com/api/Transaction&apikey=bd0eecf7cf275751a421a6101272f559b0391fa0'
    res = requests.post(url, json=data, headers={'Content-type':'application/json'})
    if(res.status_code != requests.codes.ok):
        print("FAILED:", res.content)
    else:
        print("SUCCESS, posted:", data)



# Map contribution period to number of days
period_map = {
    'Weekly' : 7,
    'BiWeekly' : 14,
    'Monthly' : 30,
    'Bi-Monthly' : 60
}

if __name__ == "__main__":
    ACC_ID = 12                                                 # User account to post transactions on to

    # Parse each goal
    for i in range(len(goals)):
        currGoal = goals[i]
        startDate = datetime.strptime(currGoal['StartDate'], '%Y-%m-%d')
        days = period_map[currGoal['Period']]
        paymentAmt = currGoal['ContrAmt']
        SGID = currGoal['SGID']
        name = currGoal['Name']

        today = datetime.strptime("2021-04-27", '%Y-%m-%d')
        nextDate = startDate

        # Generate a payment for each date period from start of the goal to today
        print(currGoal)
        while(nextDate <= today):
            currDateStr = str(nextDate.date())
            payment = {
                "SGID" : SGID,
                "AccountID" : ACC_ID,
                "TransactionName" : name + " Payment",
                "Amount" : paymentAmt,
                "DateTransactionMade" : currDateStr,
                "IsExpense" : False,
                "TransactionCategory" : "Deposits"
            }
            post(payment)
            time.sleep(1.5)

            # Advance date to next payment
            nextDate = nextDate + timedelta(days)


